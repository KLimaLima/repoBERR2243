------TERMINAL COMMANDS----------
-ls
-cd <folder>
-cd ..
-clear
-history
-pwd
up or down arrow to repeat previous command
tab to autofill

--------EXPLANATION-------------
node -> Run JS
git -> Git manager
npm -> Install JS library

---------25/3/2024--------------

MongoAtlas
    |
    Database
      |
      Collections
        |
        Documents

------------2/4/2024(1)-------------

C - insertOne   | POST
R - find        | GET
    findOne     |
U - updateOne   | PATCH 
D - deleteOne   | DELETE

async function:
                Promise<....>

To insert a new collection and document into database simultaneously:

    let result = await client.db('sample_mflix').collection('subtitle').insertOne(
      {
        language: 'Malay',
        movie: 'Your Name',
        author: 'Ali'
      }
    )
    console.log(result)

To find all documents

    let subtitle = await client.db('sample_mflix').collection('subtitle').find().toArray()
    console.log(subtitle)

To find and filter

    let subtitle = await client.db('sample_mflix').collection('subtitle').find(
      {
         language: 'Malay'
      }
    ).toArray()
    console.log(subtitle)

To update document based on properties

    let updated = await client.db('sample_mflix').collection('subtitle').updateOne(
      { movie: 'Your Name' },
      { $set:{
        author: 'Abu'
        }
      }
    )
    console.log(updated)

To delete a document according to ObjectId

    let deleted = await client.db('sample_mflix').collection('subtitle').deleteOne(
      {
        _id: new ObjectId('660b6d82639a5d19b19fde83')
      }
    )
    console.log(deleted)

----------------2/4/2024(2)---------------------------------

1.
app.get('/', (req, res) => {
  res.send('Khai was here')
})

get is the protocol method (etc. GET, POST, PATCH)
/: endpoint (like file directory)
req: request
res: response

2.
app.get('/', (req, res) => {
  res.status(200).send('Khai was here')
})

Can put status code by yourself

3.
app.get('/subtitle', async (req, res) => {
  let subtitle = await client.db('sample_mflix').collection('subtitle').find().toArray()
  res.send(subtitle)
})

This is how you send a response back to the website (This is a raw display)

will learn:

HTTP        MongoDB
POST    C   insertOne
GET     R   find
PATCH   U   updateOne
DELETE  D   deleteOne

3 API and each must have CRUD

3 x 12 API

Deadline: W13