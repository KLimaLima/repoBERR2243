------TERMINAL COMMANDS----------
-ls
-cd <folder>
-cd ..
-clear
-history
-pwd
up or down arrow to repeat previous command
tab to autofill

--------EXPLANATION-------------
node -> Run JS
git -> Git manager
npm -> Install JS library

---------25/3/2024--------------

MongoAtlas
    |
    Database
      |
      Collections
        |
        Documents

------------2/4/2024(1)-------------

C - insertOne   | POST
R - find        | GET
    findOne     |
U - updateOne   | PATCH 
D - deleteOne   | DELETE

async function:
                Promise<....>

To insert a new collection and document into database simultaneously:

    let result = await client.db('sample_mflix').collection('subtitle').insertOne(
      {
        language: 'Malay',
        movie: 'Your Name',
        author: 'Ali'
      }
    )
    console.log(result)

To find all documents

    let subtitle = await client.db('sample_mflix').collection('subtitle').find().toArray()
    console.log(subtitle)

To find and filter

    let subtitle = await client.db('sample_mflix').collection('subtitle').find(
      {
         language: 'Malay'
      }
    ).toArray()
    console.log(subtitle)

To update document based on properties

    let updated = await client.db('sample_mflix').collection('subtitle').updateOne(
      { movie: 'Your Name' },
      { $set:{
        author: 'Abu'
        }
      }
    )
    console.log(updated)

To delete a document according to ObjectId

    let deleted = await client.db('sample_mflix').collection('subtitle').deleteOne(
      {
        _id: new ObjectId('660b6d82639a5d19b19fde83')
      }
    )
    console.log(deleted)

----------------2/4/2024(2)---------------------------------

1.
app.get('/', (req, res) => {
  res.send('Khai was here')
})

get is the protocol method (etc. GET, POST, PATCH)
/: endpoint (like file directory)
req: request
res: response

2.
app.get('/', (req, res) => {
  res.status(200).send('Khai was here')
})

Can put status code by yourself

3.
app.get('/subtitle', async (req, res) => {
  let subtitle = await client.db('sample_mflix').collection('subtitle').find().toArray()
  res.send(subtitle)
})

This is how you send a response back to the website (This is a raw display)

will learn:

HTTP        MongoDB
POST    C   insertOne
GET     R   find/findOne
PATCH   U   updateOne
DELETE  D   deleteOne

3 API and each must have CRUD

3 x 12 API

Deadline: W13

    // let result = await client.db('sample_mflix').collection('subtitle').insertOne(
    //   {
    //     language: 'Japanese',
    //     movie: 'Tokyo Drift',
    //     author: 'Kohei'
    //   }
    // )
    // console.log(result)

    // let subtitle = await client.db('sample_mflix').collection('subtitle').find().toArray()
    // console.log(subtitle)

    // let subtitle = await client.db('sample_mflix').collection('subtitle').find(
    //   {
    //     language: 'Malay'
    //   }
    // ).toArray()
    // console.log(subtitle)

    // let updated = await client.db('sample_mflix').collection('subtitle').updateOne(
    //   { movie: 'Your Name' },
    //   { $set:{
    //     author: 'Abu'
    //     }
    //   }
    // )
    // console.log(updated)

    // let deleted = await client.db('sample_mflix').collection('subtitle').deleteOne(
    //   {
    //     _id: new ObjectId('660b6d82639a5d19b19fde83')
    //   }
    // )
    // console.log(deleted)

---------------------------16/4/2024------------------------------------------

127.0.0.1 is the server for self computer

app.post('/user', async (req, res) => {
  //insertOne the registration data to mongoDB
  console.log(req.body) //Get body
})

app.post('/user', async (req, res) => {
  //insertOne the registration data to mongoDB
  console.log(req.body.username) //Get data from username field in the json
})

app.post('/user', async (req, res) => {
  //insertOne the registration data to mongoDB
  let result = await client.db('sample_mflix').collection('subtitle').insertOne(
    {
      language: req.body.language,
      movie: req.body.movie,
      author: req.body.author,
    }
  )
  res.send(result)
})

encryption and decryption -> can go back and forth
hashing -> can only go one way

--------------------------------------------------------

app.post('/register', async (req, res) => {

  if (req.body.username != null && req.body.password != null) {
    
    let findSimilar = await client.db("instagram").collection("account").findOne(
      {
        username: req.body.username
      }
    )

    if (!findSimilar) {

      const hash = bcrypt.hashSync(req.body.password, saltRounds)

      let result = await client.db("instagram").collection("account").insertOne(
        {
          username: req.body.username,
          password: hash
        }
      )

      if (result) {
        res.send(`Successfully registered!`)
        console.log(`Inserted into DB\nusername: ${req.body.username}\npassword: ${req.body.password}`)
      } else {
        res. send(`Something went wrong! Please try again.`)
      }

    } else {
      res.send(`The username ${req.body.username} is already taken.`)    
    }

  } else {
    res.send(`Please enter a username and password.`)
  }

})

app.get(`/login`, async (req, res) => {

  let result = await client.db("instagram").collection("account").findOne(
    {
      username: req.body.username
    }
  )

  if (result) {
    if(bcrypt.compareSync(req.body.password, result.password) == true) {
      res.send(`Successfully login for ${result.username}`)
    } else {
      res.send(`Incorrect password!`)
    }
  } else {
    res.send(`Unable to find the username ${req.body.username}. Please register for new users.`)
  }

})

-------------------------------------------------------------------------------

filter              Operation
$eq: ==             find({<key>:{$eq:"......"}})      => default
$ne: !=
$gt: >
$gt: >
$lte: <=
$gte: >=
$and: &&
$or: ||
$elemMatch: <= to match inside the array of a collection

example
1.
-{price: {$gt: 3}, price: {$lt: 10}}  <= will not work as expected (want to get more than 5 but less than 10)
-{$and:[ {price: {$gt: 3}}, {price: {$lt: 10}} ]}

2.
-{ ingredients: { $elemMatch: {type: {$eq: "Gula"}}}}

3.
-{ ingredients: { $elemMatch: {type: {$eq: "Gula"}, amount: {$gt: 100}}}}   <=to get multiple condition in array

------------------------------------------

Midterm
Q1
filter 1/2
operation 1/2

Q2
Node.js

---------------------------------------------

updateOne(<filter>, <operator>)
          {_id:...} {name:....}

{$inc: {price: 5}}                <=increases a value by the specified value; can also use negative number to decrease value
{$set: {price: 5}}                <=sets the value to the specified value
{$min: {price: 10}}               <=sets the value to the specified value if the value in the collection is more than the specified value
{$max: {price: 20}}               <=sets the value to the specified value if the value in the collection is less than the specified value

Below are used only on the parameter with array/ object that are an array
{$pop: {ingredients: -1}}         <=removes the first(-1) or last(1) object in the specified array of the collection
{$pull: {ingredients: {type: "rice"}}}    <=removes all the object that matches the specified parameter in the specified array
{$push: {ingredients: {type: "kacang", amount: 20}}}    <=adds object to the specified array
{$addToSet: {ingredients: {type: "kacang", amount: 20}}}    <=adds object to the specified array if the value does not exist yet

------------------------------7/5/2024-------------------

authentication
authorization

JWT - JSON Web Token

use token

jwt.sign({ foo: 'bar' }, 'shhh')
1. Payload { foo: 'bar' }
2. Passkey 'shhh'

can also do this => prefer to take ones that are wholly unique and DON'T PUT IN PASSWORD (put password in shhh part)
jwt.sign({ _id: 'bar', name: 'ali' }, 'shhh')

req.headers.authorization => to get the authorization from the postman
use bearer token to insert the token you want to put in authorization

token => payload (to decrypt)

to decrypt use => req.headers.authorization.split(' ') => will divide to two string at the space
let token = req.headers.authorization.split(' ')[1]  <= most simplified technique; gives only the token

let decoded = jwt.verify(token, 'password') <= pass in the token and the passowrd that is used to encrypt it

app.post('/login', verifyToken, async (req, res) => {})    //verifyToken is a function

function verifyToken(req, res, next) {

  const authHeader = req.headers.authorization
  const token = authHeader && authHeader.split(` `)[1]

  if (token == null) return res.sendStatus(401)

    jwt.verify(token, "secret-password", (err, decoded) => {
      console.log(err)

      if (err) return res.sendStatus(403)

        req.identity = decoded

        next()
    })

}

// user login api 
app.post('/login', async (req, res) => {
  // step #1: req.body.username ??
  if (req.body.username != null && req.body.password != null) {
    let result = await client.db("maybank2u").collection("users").findOne({
      username: req.body.username
    })

    if (result) {
      // step #2: if user exist, check if password is correct
      if (bcrypt.compareSync(req.body.password, result.password) == true) {
        // password is correct
        var token = jwt.sign(
          { _id: result._id, username: result.username, name: result.name },
          'passwordorangsusahnakhack'
        );
        res.send(token)
      } else {
        // password is incorrect
        res.status(401).send('wrong password')
      }

    } else {
      // step #3: if user not found
      res.status(401).send("username is not found")
    }
  } else {
    res.status(400).send("missing username or password")
  }
})

// new user registration
app.post('/user', async (req, res) => {
  // check if username already exist ??

  // insertOne the registration data to mongo
  const hash = bcrypt.hashSync(req.body.password, 10);

  let result = await client.db("maybank2u").collection("users").insertOne(
    {
      username: req.body.username,
      password: hash,
      name: req.body.name,
      email: req.body.email
    }
  )
  res.send(result)

})

// get user profile
app.get('/user/:id', verifyToken, async (req, res) => {
  if (req.identify._id != req.params.id) {
    res.status(401).send('Unauthorized Access')
  } else {
    let result = await client.db("maybank2u").collection("users").findOne({
      _id: new ObjectId(req.params.id)
    })
    res.send(result)
  }
})

// update user account
app.patch('/user/:id', verifyToken, async (req, res) => {
  if (req.identify._id != req.params.id) {
    res.send('Unauthorized')
  } else {
    let result = await client.db("maybank2u").collection("users").updateOne(
      {
        _id: new ObjectId(req.params.id)
      },
      {
        $set: {
          name: req.body.name
        }
      }
    )
    res.send(result)
  }
})

// delete user account
app.delete('/user/:id', verifyToken, async (req, res) => {
  let result = await client.db("maybank2u").collection("users").deleteOne(
    {
      _id: new ObjectId(req.params.id)
    }
  )
  res.send(result)
})

app.post('/buy', async (req, res) => {
  const token = req.headers.authorization.split(" ")[1]

  var decoded = jwt.verify(token, 'mysupersecretpasskey');
  console.log(decoded)
})

--------------------------------------14/5/2024------------------------------------------------------

Mongo Aggregation Framework (MAF)

$match
$project => can also do calculation with this
$unwind
$sort
$limit
$lookup

example:
1.
[
  {
    '$project': {
      'ingredients': 1, 
      'category': 1, 
      'name': 1
    }
  }, {
    '$sort': {
      'sort': -1
    }
  }, {
    '$limit': 4
  }
]

2.
[
  {
    '$match': {
      'category': 'food'
    }
  }
]

3.
[
  {
    '$unwind': {
      'path': '$ingredients'
    }
  }
]

4.
[
  {
    '$project': {
      'ingredientsAmount': '$ingredients.amount'
    }
  }
]

5.
[
  {
    '$match': {
      'username': 'User1'
    }
  }, {
    '$lookup': {
      'from': 'food', 
      'localField': 'items', 
      'foreignField': '_id', 
      'as': 'items'
    }
  }
]

-------------------------------------------------------------

[
  {
    '$match': {
      'name': 'Leslie Martinez'
    }
  }, {
    '$project': {
      'name': 1, 
      'email': 1, 
      'accounts': 1
    }
  }
]

[
  {
    '$match': {
      'name': 'Leslie Martinez'
    }
  }, {
    '$lookup': {
      'from': 'accounts', 
      'localField': 'accounts', 
      'foreignField': 'account_id', 
      'as': 'accounts'
    }
  }
]

------------------------------------------------------------------------------------

tuto 4

Q1

1. updateOne(<filter>, <data>)
                |           |
              $eq, $ne,    $set,
              $lt, $gt     $inc, $pop

updateOne(
  {name: {$eq: "John Doe"}},
  {$set: {department: "Customer Support"}}
)

2.

updateOne(
  {name: {$eq: "Alice Johnson"}},
  {$inc: {project: 1}}
)

3.

find(
  $or[
  {department: {$eq: "Sales"}},
  {project: {$gt: 4}}
  ]
)

4.

find(
  {$or: [
    {skills: {$eq: "communication"}},
    {skills: {$eq: "negotiation"}}
  ]}
)

find(
  {skills: {$in: ["communication", "negotiation"]}}
)

5.

find(
  $and[
    {age: {$lt: 30}},
    {department: {$eq: "Development"}}
  ]
)

6.

updateOne(
  {name: {$eq: "Jane Smith"}},
  {$addToSet: {skills: "management"}}
)

updateOne(
  {name: {$eq: "Jane Smith"}},
  {$push: {skills: "management"}}
)

7.

find(
  $or[
    {name: {$eq: "John Doe"}},
    {skills: {$eq: "seo"}}
  ]
)

8.

updateMany(
  {active: {$eq: false}},
  {$inc: {projects: -1}}
)

9.

find(
  $and[
    {active: {$eq: true}},
    {skills: {$eq: "programming"}}
  ]
)

10.

updateMany(
  {department: {$eq: "marketing"}},
  {$inc: {age: 2}}
)

marks given on updateMany, department, $eq, "marketing", $inc, age, 2

Q2

updateMany(
  {},
  {$inc: {stock: -2}}
)

---------------------------------------------------------------------

app.get       READ
app.post      CREATE
app.patch     UPDATE
app.delete    DELETE
=> These are HTTP Method

endpoint => '/'

(req, res)  => request and response

req.body => to get data
res.send => send data back to client

Q1 MQL

====================================================================

genre.name : {$eq: "Drama"}

genre: {$elemMatch: {name: "Drama"}}

========================================================================

find(
  $and[
    { format: {$eq: "hardcover"}},
    { publisher: {$eq: "Penguin Random House"}}
  ]
)

==========================================================================

find(
  {$and: [
    {$or: [
      {tag: {$eq: "classic"}},
      {tag: {$eq: "bestseller"}}
    ]},
    {author: {$eq: "Jane Austen"}}
  ]}
)

find(
  {$and: [
  {tag: {$in: ["classic", "bestseller"]}},
  {author: {$eq: "Jane Austen"}}
  ]}
)

=========================================================================

find(
  {$and[
  {year: {$gte: 2000}},
  {year: {$lte: 2010}},
  {publisher: {$eq: "HarperCollins"}}
  ]}
)

========================================================================

find(
  {courses: {$elemMatch: {course_name: "Physics"}}}
)

find(
  {courses.course_name: {$eq: "Physics"}}
)

==========================================================================

find(
  {courses.grade: {$eq: "A"}}
)

=======================================================================

findOne(
  {name: "Charlie"}
)

==========================================================================

updateOne(
  {name: "Bob", courses.course_name: "Mathematics"},
  {$set: {courses.$.grade: "B"}}
)

updateOne(
  {name: {$eq: Bob}}, {courses.course_name: {$eq: "Mathematics"}},
  {$set: {courses.course_name : "B"}}
)

========================================================================

updateOne(
  {name: "Alice"},
  {$pull: {courses: {course_name: "Chemistry"}}}
)

======================================================================================

MQL               Aggregation Framework

find()            $match
insertOne()       $project
updateOne()       $unwind
deleteOne()       $limit
                  $sort
                  $lookup

=======================================================================================

orders                        customers

Stage #1: $lookup     =>    join

Stage #2: $unwind     =>    flatten, array

Stage #3: $project    =>    

=======================================================================================

1.
$lookup

{
  order_id: 1,
  customer_id: 1,
  products: [],
  order_date:,
  customer_info: [
    {customer_id:,
    name:,
    email:}
  ]
}

2.
$unwind

{
  order_id:,
  customer_id:,
  products:[],
  order_date:,
  customer_info: {
    customer_id:,
    name:,
    email:
  }
}

3.
$project

{
  order_id:,
  customer_name:,
  customer_email:,
  total_request:1220
}

===========================================

courses.aggregate([
  {
    $match: {
      session: {$eq: "2021-2"}
    }
  },

  {
    $project: {
      total_students: { $count: "$students" }
    }
  }
])

==========================================================

courses.aggregate([
  {
    $match: {
      _id: "BENR2423"
    }
  },
  {
    $lookup: {
      from:"lecturer",
      localField:"lecturer",
      foreignField:"_id",
      as: "lecturer"
    }
  }
])

============================================================

